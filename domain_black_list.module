<?php

module_load_include('inc', 'domain_black_list', 'includes/domain_black_list.menu');
module_load_include('inc', 'domain_black_list', 'includes/domain_black_list.entity');
module_load_include('inc', 'domain_black_list', 'includes/domain_black_list.permission');
module_load_include('inc', 'domain_black_list', 'includes/domain_black_list.forms');
module_load_include('inc', 'domain_black_list', 'includes/domain_black_list.theme');
module_load_include('inc', 'domain_black_list', 'includes/domain_black_list.preprocess');

/**
 * Example 1: Used for add post render callback.
 */
function domain_black_list_page_alter(&$page) {
  if (variable_get('domain_black_list_filter_html_page')) {
    $page['#post_render'][] = 'domain_black_list_page_alter_post_render';
  }
}

/**
 * Example 1: Clean all links that we have.
 */
function domain_black_list_page_alter_post_render($page) {
  $domains = DomainBlackList::getActives();

  if (!empty($domains)) {
    DomainBlackListFilter::formatDomains($domains);
    $count = DomainBlackListFilter::removeDomainsFromString($domains, $page);

    if (variable_get('domain_black_list_debug')) {
      $message = format_plural($count, t('1 domain was removed in the previous request ("Remove domains from HTML output").'),
        t('@count domains were removed in the previous request ("Remove domains from HTML output").'));
      DomainBlackListFilter::showDebugMessage($message);
    }
  }

  return $page;
}

/**
 * Example 2: Alter href attributes for links that used url().
 */
function domain_black_list_url_outbound_alter(&$path, &$options, $original_path) {
  if (variable_get('domain_black_list_alter_urls') && $options['external']) {
    $domains = DomainBlackList::getActives();

    if (!empty($domains)) {
      $domain_filtered = '';
      DomainBlackList::isValid($path, $domain_filtered);
      $domain_pattern =  DomainBlackListFilter::getSimpleDomainPattern($domain_filtered);

      // @todo test with parse_url
      if ($domain_pattern && preg_grep($domain_pattern, $domains)) {
        // @todo allow choose path in settings form
        $path = '<front>';

        $message = t('@domain has been removed in the current request from the href HTML attribute ("Remove url from link").', array('@domain' => $domain_filtered));
        DomainBlackListFilter::showDebugMessage($message);
      }
    }
  }
}

/**
 * Example 3: Validate fields for don't allow submit invalid domains.
 */
function domain_black_list_field_attach_validate($entity_type, $entity, &$errors) {
  if (variable_get('domain_black_list_field_validation')) {
    // @todo save in array all matches and then format plural message
    // @todo add more fields types
    // @todo add more fields like $item['value'] f.e. in link it will be different
    $fields = DomainBlackListFilter::getValidateFieldsInstancesFromEntity($entity_type, $entity->type);
    $domains = DomainBlackList::getActives();

    if (!empty($domains)) {
      foreach ($fields as $field) {
        foreach ($entity->{$field->field_name} as $langcode => $items) {
          foreach ($items as $delta => $item) {
            foreach ($domains as $domain) {
              $domain_pattern = DomainBlackListFilter::getSimpleDomainPattern($domain);

              if (preg_match($domain_pattern, $item['value'])) {
                $errors[$field->field_name][$langcode][$delta][] = array(
                  'error' => $field->field_name,
                  'message' => t('The domain @domain is not allowed.', array('@domain' => $domain)),
                );
              }
            }
          }
        }
      }
    }
  }
}

/*
 * Example 4: Other option could be implements a filter for filtereds texts that
 *            transform the output removing invalid domains.
 * @todo
 */